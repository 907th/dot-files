snippet #!
	#!/usr/bin/env ruby
snippet #enc
	# encoding: utf-8
snippet rspec
	require "spec_helper"
snippet let
	let(${1}) { ${2} }
snippet let!
	let!(${1}) { ${2} }
snippet des
	describe "${1}" do
		${2}
	end
snippet it
	it "${1}" do
		${2}
	end
snippet itlog
	it "creates user log entry" do
		expect do perform end.to change(UserLog, :count).by(1)
		expect(UserLog.last).to have_attributes(
			user: user,
			action: ${1},
			loggable: ${2}
		)
	end
snippet ctx
	context "${1}" do
		${2}
	end
snippet do
	do
		${1}
	end
snippet {
	{ ${1} }
snippet {{
	{ |${1}| ${2} }
snippet doo
	do |${1}|
		${2}
	end
snippet exp
	expect(${1}).to ${2}
snippet nexp
	expect(${1}).not_to ${2}
snippet exd
	expect do ${1} end.to ${2}
snippet sbj
	subject
snippet subj
	subject { ${1} }
snippet descl
	described_class
snippet cls
	class ${1}
		${2}
	end
snippet mod
	module ${1}
		${2}
	end
snippet def
	def ${1}
		${2}
	end
snippet conc
	module ${1}
		extend ActiveSupport::Concern
		${2}
	end
snippet incl
	included do
		${1}
	end
snippet clsm
	module ClassMethods
		${1}
	end
snippet clsf
	class << self
		${1}
	end
snippet ini
	initialize${1}
snippet if
	if ${1}
		${2}
	end
snippet ife
	if ${1}
		${2}
	else
		${3}
	end
snippet case
	case ${1}
		when ${2}
	end
snippet casee
	case ${1}
		when ${2}
		else ${3}
	end
snippet beg
	begin
		${1}
	end
snippet begr
	begin
		${1}
	rescue ${2} => error
		${3}
	end
