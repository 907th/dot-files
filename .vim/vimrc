set nocompatible

if !has("gui_macvim")
  finish
endif

" vim-plug {{{

call plug#begin('~/.vim/plugged')

Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'vim-airline/vim-airline'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'schickling/vim-bufonly'
Plug 'szw/vim-maximizer'
Plug 'majutsushi/tagbar'
Plug 'junegunn/fzf' " for fzf.vim
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'lokaltog/vim-easymotion'
Plug 'junegunn/vim-easy-align'
Plug 'dockyard/vim-easydir'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb' " fugitive plugin for GitHub
Plug 'shumphrey/fugitive-gitlab.vim' " fugitive plugin for GitLab
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-rails'
Plug 'marcweber/vim-addon-mw-utils' " for vim-snipmate
Plug 'tomtom/tlib_vim' " for vim-snipmate
Plug 'garbas/vim-snipmate'
Plug 'vim-ruby/vim-ruby'
Plug 'noprompt/vim-yardoc'
Plug 'honza/dockerfile.vim'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'aklt/plantuml-syntax'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'rust-lang/rust.vim'

call plug#end()

" }}}

" Main settings {{{

syntax on
colorscheme dracula

filetype on
filetype plugin on
filetype indent on

set background=dark
set autoindent
set autoread
set number
set relativenumber
set wrap
set hidden
set fileencoding=utf-8
set mouse=a
set backspace=2
set laststatus=2
set scrolloff=2
set sidescrolloff=4
set incsearch
set hlsearch
set ignorecase
set smartcase
set foldenable
set foldmethod=indent
set foldlevelstart=99
set showcmd
set wildmenu
set wildmode=full
set omnifunc=syntaxcomplete#Complete
set completeopt=menuone
set nobackup
set nowritebackup
set noswapfile
set listchars=tab:\ \ ,trail:.
set list
set splitright
set splitbelow
set noshowmode
set diffopt=filler,vertical
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=0
set belloff=all
set guicursor=a:blinkon0
set clipboard=unnamed
set cpoptions+=I " Do not delete autoindentation after cursor movement

" Set the following format options despite of what ftplugin wants to set (https://vi.stackexchange.com/a/1985)
autocmd FileType * setlocal
\ formatoptions-=c
\ formatoptions-=r
\ formatoptions-=o

" }}}

" Plugins config {{{

let g:airline_section_b = '%-0.20{getcwd()}'
let g:airline_section_c = '%f'

let g:buffergator_sort_regime = 'mru'
let g:buffergator_show_full_directory_path = 0
let g:buffergator_autoexpand_on_split = 0
let g:buffergator_viewport_split_policy  = 'B'
let g:buffergator_split_size = 12
let g:buffergator_suppress_keymaps = 1

let g:tagbar_compact = 1
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_width = 35
let g:tagbar_left = 1
let g:tagbar_sort = 0

let g:ackprg = 'ag --vimgrep'
cnoreabbrev Ag Ack!

let g:maximizer_set_default_mapping = 0
let g:maximizer_restore_on_winleave = 1

let g:javascript_plugin_jsdoc = 1

let g:snipMate = { 'snippet_version' : 1 }

let g:fugitive_gitlab_domains = ['https://gitlab.sbmt.io/']

let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
let g:rustfmt_autosave = 1

hi EasyMotionTarget guifg=Yellow
hi EasyMotionTarget2First guifg=Yellow
hi EasyMotionTarget2Second guifg=Yellow

" }}}

" Key mappings {{{

nmap <Down> gj
nmap <Up> gk
vmap <Down> gj
vmap <Up> gk

noremap <expr> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <Home> <C-o><Home>

nnoremap <CR> o<Esc>
nnoremap <Backspace> O<Esc>
nnoremap <C-J> i<CR><Esc>

nnoremap <Del> a<Space><Esc>
nnoremap <Space> i<Space><Esc>

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" <M-Left/Right/Up/Down>
nmap <silent> <M-D-Left> <C-w>h
nmap <silent> <M-D-Right> <C-w>l
nmap <silent> <M-D-Up> <C-w>k
nmap <silent> <M-D-Down> <C-w>j
nmap <silent> <D-w> :bd<CR>
nmap <silent> <D-d> <C-w>v
nmap <silent> <D-D> <C-w>s
nmap <silent> <S-D-CR> :MaximizerToggle!<CR>

nmap <silent> <D-1> :BuffergatorToggle<CR>
nmap <silent> <D-2> :TagbarToggle<CR>
nmap <silent> <D-5> :checktime<CR>
nmap <silent> <D-9> :Reset<CR>
nmap <silent> <D-\> :FZF<CR>
nmap <silent> <D-]> :FixWhitespace<CR>
nmap <silent> <D-/> :let @/ = ''<CR>
nmap <silent> <D-'> <Plug>(easymotion-prefix)

" <M-y> plus y\l\r
nmap <silent> <D-y>y :let @+ = fnamemodify(expand("%"), ":~:.")<CR>
nmap <silent> <D-y>l :let @+ = fnamemodify(expand("%"), ":~:.") . ":" . line(".")<CR>
nmap <silent> <D-y>r :let @+ = "rspec " . fnamemodify(expand("%"), ":~:.") . ":" . line(".")<CR>

command Reset tabnew | tabonly | BufOnly

" }}}

" Tab autocompletion + snippets {{{

imap <expr> <CR> <SID>myCR()
imap <expr> <Tab> <SID>myTab()
imap <expr> <Up> <SID>myUp()
imap <expr> <Down> <SID>myDown()

function! s:myCR()
  return pumvisible() ? "\<C-y>" : "\<CR>\<Space>\<BS>"
endfunction

function! s:myTab()
  return pumvisible() ? "\<C-e>" :
\     <SID>snipMateCanBeExpanded() ? <SID>triggerSnippet() :
\       <SID>checkBackSpace() ?  "\<Tab>" : "\<C-n>"
endfunction

function! s:myUp()
  return pumvisible() ? "\<C-p>" : "\<Up>"
endfunction

function! s:myDown()
  return pumvisible() ? "\<C-n>" : "\<Down>"
endfunction

function! s:checkBackSpace()
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

function! s:snipMateCanBeExpanded()
  let word = snipMate#WordBelowCursor()
  let snippets = map(snipMate#GetSnippetsForWordBelowCursor(word, 0), 'v:val[0]')
  let matches = filter(snippets, "v:val =~# '\\V\\^" . escape(word, '\') . "\\$'")
  return len(matches) > 0
endfunction

function! s:triggerSnippet()
  return "\<C-r>=snipMate#TriggerSnippet()\<CR>"
endfunction

" }}}
